{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","friend","id","alt","name","email","CardList","friends","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredFriends","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0TAEaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,OAAOC,GAAvC,0BAAmEC,IAAI,WAC/E,6BAAKL,EAAMG,OAAOG,OAClB,4BAAIN,EAAMG,OAAOI,YCJhBC,EAAY,SAAAR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,QAAQC,KAAI,SAACP,GAAD,OACd,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOC,UCNzBO,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCHG,E,kDArCX,aAAe,IAAD,8BACV,gBAcJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACTb,QAAS,GACTU,YAAa,IALP,E,qDASd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,QAASkB,S,oBAQ/C,WAAS,IAAD,EAC2BC,KAAKN,MAA7Bb,EADH,EACGA,QAASU,EADZ,EACYA,YACVU,EAAkBpB,EAAQqB,QAAO,SAAA3B,GAAM,OACzCA,EAAOG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEnD,OACI,sBAAK9B,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CACIW,YAAY,iBACZC,aAAce,KAAKf,eACvB,cAAC,EAAD,CAAUJ,QAASoB,W,GAhCjBI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,SAKlDX,M","file":"static/js/main.75c5b60f.chunk.js","sourcesContent":["import './card.styles.css';\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.friend.id}?set=set2&size=180x180`} alt=\"friend\"/>\r\n            <h1>{props.friend.name}</h1>\r\n            <p>{props.friend.email}</p>\r\n        </div>\r\n    )\r\n}","import './card-list.styles.css';\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport const CardList  = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                props.friends.map((friend) =>\r\n                    <Card key={friend.id} friend={friend}/>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}","import './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}/>\r\n)","import {Component} from \"react\";\n\nimport {CardList} from \"./components/card-list/card-list.component\";\n\nimport './App.css';\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            friends: [],\n            searchField: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(res => res.json())\n            .then(users => this.setState({friends: users}));\n    }\n\n    handleChange = (e) => {\n        this.setState({searchField: e.target.value});\n    }\n\n\n    render(){\n        const {friends, searchField} = this.state;\n        const filteredFriends = friends.filter(friend =>\n            friend.name.toLowerCase().includes(searchField.toLowerCase())\n        )\n        return (\n            <div className=\"App\">\n                <h1>Friends Rolodex</h1>\n                <SearchBox\n                    placeholder='search friends'\n                    handleChange={this.handleChange}/>\n                <CardList friends={filteredFriends} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}